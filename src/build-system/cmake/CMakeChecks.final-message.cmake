#############################################################################
# $Id$
#############################################################################
#############################################################################
##
##  NCBI CMake wrapper
##
##  Summary


get_directory_property(_CompileDefs COMPILE_DEFINITIONS)
list(SORT _CompileDefs)
get_directory_property(_CompileOptions COMPILE_OPTIONS)
string(REPLACE ";" " " _CompileOptions "${_CompileOptions}")
get_directory_property(_LinkOptions LINK_OPTIONS)
string(REPLACE ";" " " _LinkOptions "${_LinkOptions}")

if ( NOT "${NCBI_MODULES_FOUND}" STREQUAL "")
    list(REMOVE_DUPLICATES NCBI_MODULES_FOUND)
endif()
foreach (mod ${NCBI_MODULES_FOUND})
    set(MOD_STR "${MOD_STR} ${mod}")
endforeach()

#STRING(SUBSTRING "${EXTERNAL_LIBRARIES_COMMENT}" 1 -1 EXTERNAL_LIBRARIES_COMMENT)

set(_summary)
if(DEFINED NCBI_SIGNATURE_CFG)
    string(APPEND _summary "\nNCBI_SIGNATURE:        ${NCBI_SIGNATURE_CFG}")
endif()
if(DEFINED NCBITEST_SIGNATURE)
    string(APPEND _summary "\nNCBITEST_SIGNATURE:    ${NCBITEST_SIGNATURE}")
endif()
if($ENV{NCBI_AUTOMATED_BUILD})
    string(APPEND _summary "\nNCBI_AUTOMATED_BUILD:  $ENV{NCBI_AUTOMATED_BUILD}")
endif()
if($ENV{NCBI_CHECK_DB_LOAD})
    string(APPEND _summary "\nNCBI_CHECK_DB_LOAD:    $ENV{NCBI_CHECK_DB_LOAD}")
endif()
if($ENV{NCBIPTB_INSTALL_CHECK})
    string(APPEND _summary "\nNCBIPTB_INSTALL_CHECK: $ENV{NCBIPTB_INSTALL_CHECK}")
endif()
if($ENV{NCBIPTB_INSTALL_SRC})
    string(APPEND _summary "\nNCBIPTB_INSTALL_SRC:   $ENV{NCBIPTB_INSTALL_SRC}")
endif()
string(APPEND _summary "\n------------------------------------------------------------------------------")
string(APPEND _summary "\nCMake exe:      ${CMAKE_COMMAND}")
string(APPEND _summary "\nCMake version:  ${CMAKE_VERSION}")
string(APPEND _summary "\nCompiler:       ${NCBI_COMPILER} v${NCBI_COMPILER_VERSION}")
string(APPEND _summary "\nBuild Type:     ${NCBI_CONFIGURATION_TYPES}")
string(APPEND _summary "\nShared Libs:    ${BUILD_SHARED_LIBS}")
string(APPEND _summary "\nTop Source Dir: ${NCBI_SRC_ROOT}")
string(APPEND _summary "\nBuild Root:     ${CMAKE_BINARY_DIR}")
string(APPEND _summary "\nExecutable Dir: ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
string(APPEND _summary "\nArchive Dir:    ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}")
string(APPEND _summary "\nLibrary Dir:    ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
string(APPEND _summary "\nC Compiler:     ${CMAKE_C_COMPILER}")
string(APPEND _summary "\nC++ Compiler:   ${CMAKE_CXX_COMPILER}")
if (CMAKE_USE_DISTCC AND DISTCC_EXECUTABLE)
    string(APPEND _summary "\n    distcc:     ${DISTCC_EXECUTABLE}")
endif()
if (CMAKE_USE_CCACHE AND CCACHE_EXECUTABLE)
    string(APPEND _summary "\n    ccache:     ${CCACHE_EXECUTABLE}")
endif()
set(_BuildType)
if("${NCBI_CONFIGURATION_TYPES_COUNT}" EQUAL 1)
    string(TOUPPER "${NCBI_CONFIGURATION_TYPES}" _BuildType)
endif()
set(_flags ${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_${_BuildType}} ${_CompileOptions})
string(REPLACE "\\" "/" _flags "${_flags}")
string(APPEND _summary "\nCFLAGS:        ${_flags}")
if(NOT "${NCBI_CONFIGURATION_TYPES_COUNT}" EQUAL 1)
        foreach(_cfg IN LISTS NCBI_CONFIGURATION_TYPES)
            string(TOUPPER "${_cfg}" _ucfg)
            string(REPLACE "\\" "/" _flags "${CMAKE_C_FLAGS_${_ucfg}}")
            string(APPEND _summary "\n       ${_cfg}:  ${_flags}")
        endforeach()
endif()
set(_flags ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_${_BuildType}} ${_CompileOptions})
string(REPLACE "\\" "/" _flags "${_flags}")
string(APPEND _summary "\nCXXFLAGS:      ${_flags}")
if(NOT "${NCBI_CONFIGURATION_TYPES_COUNT}" EQUAL 1)
        foreach(_cfg IN LISTS NCBI_CONFIGURATION_TYPES)
            string(TOUPPER "${_cfg}" _ucfg)
            string(REPLACE "\\" "/" _flags "${CMAKE_CXX_FLAGS_${_ucfg}}")
            string(APPEND _summary "\n       ${_cfg}:  ${_flags}")
        endforeach()
endif()
set(_flags ${CMAKE_EXE_LINKER_FLAGS} ${CMAKE_EXE_LINKER_FLAGS_${_BuildType}} ${_LinkOptions})
string(REPLACE "\\" "/" _flags "${_flags}")
string(APPEND _summary "\nEXE_LINKER_FLAGS:    ${_flags}")
if(NOT "${NCBI_CONFIGURATION_TYPES_COUNT}" EQUAL 1)
        foreach(_cfg IN LISTS NCBI_CONFIGURATION_TYPES)
            string(TOUPPER "${_cfg}" _ucfg)
            string(REPLACE "\\" "/" _flags "${CMAKE_EXE_LINKER_FLAGS_${_ucfg}}")
            string(APPEND _summary "\n       ${_cfg}:  ${_flags}")
        endforeach()
endif()
if (BUILD_SHARED_LIBS)
    set(_flags ${CMAKE_SHARED_LINKER_FLAGS} ${CMAKE_SHARED_LINKER_FLAGS_${_BuildType}} ${_LinkOptions})
    string(REPLACE "\\" "/" _flags "${_flags}")
    string(APPEND _summary "\nSHARED_LINKER_FLAGS:  ${_flags}")
    if(NOT "${NCBI_CONFIGURATION_TYPES_COUNT}" EQUAL 1)
            foreach(_cfg IN LISTS NCBI_CONFIGURATION_TYPES)
                string(TOUPPER "${_cfg}" _ucfg)
                string(REPLACE "\\" "/" _flags "${CMAKE_SHARED_LINKER_FLAGS_${_ucfg}}")
                string(APPEND _summary "\n       ${_cfg}:  ${_flags}")
            endforeach()
    endif()
endif()
if (OFF)
    string(APPEND _summary "\nSTATIC_LINKER_FLAGS: ${CMAKE_STATIC_LINKER_FLAGS} ${CMAKE_STATIC_LINKER_FLAGS_${_BuildType}}")
    if (APPLE)
        string(APPEND _summary "\nMODULE_LINKER_FLAGS:  ${CMAKE_MODULE_LINKER_FLAGS} ${CMAKE_MODULE_LINKER_FLAGS_${_BuildType}} ${_LinkOptions}")
    endif()
endif()
string(APPEND _summary "\nCompile Definitions: ${_CompileDefs}")
string(APPEND _summary "\nDataTool Ver:   ${_datatool_version}")
string(APPEND _summary "\nDataTool Path:  ${NCBI_DATATOOL}")
string(APPEND _summary "\n      ")
string(APPEND _summary "\nComponents:  ${NCBI_ALL_COMPONENTS}")
string(APPEND _summary "\nRequirements:  ${NCBI_ALL_REQUIRES}")
string(APPEND _summary "\nDisabled Components:  ${NCBI_ALL_DISABLED}")
string(APPEND _summary "\nDeprecated Components:  ${NCBI_ALL_LEGACY}")
string(APPEND _summary "\nCompile Features:  ${NCBI_PTBCFG_PROJECT_FEATURES}")

string(APPEND _summary "\n------------------------------------------------------------------------------")
NCBI_notice(${_summary})
