Performance testing
-------------------
These tests let to compare h2load collected values for two instances of the PSG server.
Here is how to use it:

- have two PSG server instances running
- run the script as follows:
  ./psg_perf.py tonka1:2180 tonka1:2181 --runs=50 --throws=5 --delay=1

There will be quite a bit of output.

If more test cases need to be added then modify the performance.sh script.

Note: h2load must be runnable from the same directory as the script.





Unit tests
----------

The tests use the udc framework (see the udc NCBI facility).

To run the tests:
- make sure it is a Linux host
- make sure udc is in PATH (e.g. 'which udc')
- change the directory to this one
- check the psg.bash source code that it connects to the proper server instance
  (host:port are hardcoded there)
- run ./run_tests.py

It was forbidden to save the baseline files as is in SVN however it was allowed
to save a tar archive. So the wrapper script basically unpacks the baseline
files if needed and runs 'udc'.

Note: after changing test cases prepare a new archive with the baseline (someone
      insisted to have an archive in SVN)
tar -czf baseline.tar.gz baseline/



Manual tests for the resolution algorithm
-----------------------------------------

1. Make the csv snapshot of the SI2CSI table, e.g.
  /panfs/pan1.be-md.ncbi.nlm.nih.gov/id_dumps/id_software/cassandra/test/bin/cqlsh idtest214 9042
  cqlsh> COPY idmain.si2csi (sec_seq_id, sec_seq_id_type, accession, seq_id_type, version) TO './si2csi.cass.dump';

2. Prepare the binary convert_to_fasta from the utils subdirectory

3. Have
   convert_to_fasta
   convert_to_fasta.sh
   si2csi_psg_test.py
   si2csi.cass.dump

   in the same directory and then run
   python3 -u ./si2csi_psg_test.py > output 2>&1

   NB: an exclusion file can also be supplied for the python script


HUP
~~~
HUP records need a cookie. This is how to send cookie with h2load
./h2load -n 100 "http://tonka1:2180/ID/get?seq_id=gb|MF358689|&seq_id_type=5" -H 'cookie: WebCubbyUser="...;...;...;..."'

curl -s --cookie 'WebCubbyUser="...;...;...;..."' "http://psg11:12000/ID/get?seq_id=gb|MF358689|&seq_id_type=5"

Using psg_client:
export NCBI_PSG_AUTH_TOKEN='"...;...;...;..."'
echo '{ "jsonrpc": "2.0", "method": "biodata", "params": { "bio_id": [ "gb|WMV97217|", 5 ], "user_args": "disable_processor=WGS" }, "id": "biodata_1" }' | psg_client interactive -server-mode -data-limit 1KB -preview-size 16 -service psg11:12000


vtune
-----

On tonka1 it is located here:
/usr/local/intel/2018/vtune_amplifier_2018.3.0.558279/bin64/


Stress test with psg_client
---------------------------

psg_client.ini:
[PSG]
max_sessions = 10
num_io = 80
request_retries = 0
request_timeout = 3000

Command line:
$ yes 2 |head -1000 | pv -lL50 |psg_client resolve -service tonka1:2180 -https -server-mode |jq -c '.|select(.status=="Error")'

-1000 => 1000 requests
pv -lL50 => 50 requests per second



How to build locally libuv/libh2o/datastax for experiments
----------------------------------------------------------

cd /export/home/satskyse
mkdir psglibs
cd psglibs

-- Download libuv, unpack it
cd libuv-1.51.0
bash autogen.sh
./configure --prefix=/export/home/satskyse/psglibs/
make
make install
-- there could be some warnings but they could be ignored, at least for 1.51.0 version


-- download libh2o, unpack it
-- or (better) copy from /netopt/ncbi_tools64/h2o-2.2.6-ncbi3+a8/src
-- Copying is better because it is an NCBI patched version

cd /export/home/satskyse/psglibs/h2o-2.2.6-ncbi3/src
mkdir build
cd build

-- default compile flags
PKG_CONFIG_PATH=/export/home/satskyse/psglibs/lib/pkgconfig/   cmake --fresh -DWITH_BUNDLED_SSL=off -DCMAKE_INSTALL_PREFIX=/export/home/satskyse/psglibs/ -DWITH_MRUBY=off -DCMAKE_BUILD_TYPE=Debug ..
-- or
PKG_CONFIG_PATH=/export/home/satskyse/psglibs/lib/pkgconfig/   cmake --fresh -DWITH_BUNDLED_SSL=off -DCMAKE_INSTALL_PREFIX=/export/home/satskyse/psglibs/ -DWITH_MRUBY=off -DCMAKE_BUILD_TYPE=Release ..

-- sanitizer compile flags
PKG_CONFIG_PATH=/export/home/satskyse/psglibs/lib/pkgconfig/   cmake --fresh -DWITH_BUNDLED_SSL=off -DCMAKE_INSTALL_PREFIX=/export/home/satskyse/psglibs/ -DWITH_MRUBY=off -DCMAKE_C_FLAGS="-fsanitize=address -fno-stack-protector -fno-omit-frame-pointer" -DCMAKE_BUILD_TYPE=Debug ..

-- There will be a warning about WSLAY. It can be ignored
cd ..
make
make install


-- download datastax, unpack it

cd /export/home/satskyse/psglibs/datastax/cpp-driver-2.17.1
mkdir build
cd build
PKG_CONFIG_PATH=/export/home/satskyse/psglibs/lib/ cmake -DCMAKE_INSTALL_PREFIX=/export/home/satskyse/psglibs/ -DCMAKE_BUILD_TYPE=Debug -DLIBUV_INCLUDE_DIR=/export/home/satskyse/psglibs/include/ ..
make
make install


-- copy everything from /export/home/satskyse/psglibs/lib64 to /export/home/satskyse/psglibs/lib
-- rename /export/home/satskyse/psglibs/lib64 to /export/home/satskyse/psglibs/lib64-orig
-- otherwise it messes up the toolkit configure


