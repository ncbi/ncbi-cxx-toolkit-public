
# Visual Studio 2022 + Intel Inspector 2024 specific suppressions | false positives


suppression = {
	name = "vector / __std_find_trivial_impl - 1"
	type = {invalid_memory_access_partial}
	stacks = {
		{
			...;
			func="__std_find_trivial_impl<`anonymous namespace'::_Find_traits_1,unsigned char>",src=vector_algorithms.cpp;
		}
	}
}
suppression = {
	name = "vector / __std_find_trivial_impl - 2"
	type = {invalid_memory_access}
	stacks = {
		{
			...;
			func="`anonymous namespace'::__std_find_trivial_impl<`anonymous namespace'::_Find_traits_1,unsigned char>(const void *, const void *, unsigned char)",src=vector_algorithms.cpp;
		}
	}
}
suppression = {
	name = "vector / __std_find_trivial_impl - 3"
	type = {uninitialized_memory_access_partial}
	stacks = {
		{
			!!!;
			func="`anonymous namespace'::__std_find_trivial_impl<`anonymous namespace'::_Find_traits_4,unsigned int>(const void *, const void *, unsigned int)";
		}
	}
}
suppression = {
	name = "vector / __std_find_trivial_impl - 4"
	type = {invalid_memory_access_partial}
	stacks = {
		{
			!!!;
			src=vector_algorithms.cpp,func="`anonymous namespace'::__std_find_trivial_impl<`anonymous namespace'::_Find_traits_4,unsigned int>(const void *, const void *, unsigned int)";
		}
		allocation={
			!!!;
			src=vector,func=_Allocate;
		}
	}
}
suppression = {
	name = "vector / __std_find_trivial_impl - 5"
	type = {invalid_memory_access}
	stacks = {
		{
			!!!;
			src=vector_algorithms.cpp,func="`anonymous namespace'::__std_find_trivial_impl<`anonymous namespace'::_Find_traits_4,unsigned int>(const void *, const void *, unsigned int)";
		}
		allocation={
			!!!;
			src=vector,func=_Allocate;
		}
	}
}
suppression = {
	name = "vector / __std_find_trivial_impl - 6"
	type = {invalid_memory_access_partial}
	stacks = {
		{
			...;
			src=vector_algorithms.cpp,func="`anonymous namespace'::__std_find_trivial_impl<`anonymous namespace'::_Find_traits_1,unsigned char>(const void *, const void *, unsigned char)";
		}
	}
}
suppression = {
	name = "vector / __std_find_trivial_impl - 7"
	type = {uninitialized_memory_access_partial}
	stacks = {
		{
			!!!;
			src=vector_algorithms.cpp,func="`anonymous namespace'::__std_find_trivial_impl<`anonymous namespace'::_Find_traits_1,unsigned char>(const void *, const void *, unsigned char)";
		}
	}
}


suppression = {
	name = "ucrtbase.dll / any low level functions via setlocale"
	type = {invalid_memory_access}
	stacks = {
		{
			...;
			mod=ucrtbase.dll,func=setlocale;
			...;
			func=_Construct,src=xlocale;
		}
		allocation={
			...;
			func=_Construct,src=xlocale;
		}
	}
}
suppression = {
	name = "ucrtbase.dll / _stdio_common_vfprintf"
	type = {uninitialized_memory_access}
	stacks = {
		{
			...;
			mod=ucrtbase.dll,func=_stdio_common_vfprintf;
		}
	}
}
suppression = {
	name = "ucrtbase.dll / _stdio_common_vfprintf_s"
	type = {uninitialized_memory_access}
	stacks = {
		{
			...;
			mod=ucrtbase.dll,func=_stdio_common_vswprintf_s;
		}
	}
}
suppression = {
	name = "ws2_32.dll / getsockopt"
	type = {invalid_memory_access}
	stacks = {
		{
			...;
			mod=ntdll.dll,func=RtlInitializeResource;
			...;
			mod=ws2_32.dll,func=getsockopt;
		}
	}
}
suppression = {
	name = "ucrtbase.dll / stat64"
	type = {invalid_memory_access}
	stacks = {
		{
			...;
			mod=ucrtbase.dll,func=stat64;
		}
	}
}

suppression = {
	name = "ucrtbase.dll / putenv"
	type = {invalid_call}
	stacks = {
		{
			...;
			mod=ntdll.dll,func=RtlSetEnvironmentVar;
			...;
			mod=ucrtbase.dll,func=getenv_s;
		}
	}
}
suppression = {
	name = "ucrtbase.dll / fclose"
	type = {uninitialized_memory_access_partial}
	stacks = {
		{
			...;
			mod=ucrtbase.dll,func=fclose;
		}
	}
}
suppression = {
	name = "dbghelp.dll / SymLoadModuleEx"
	type = {prob_mem_uninit,prob_mem_uninit_partial}
	stacks = {
		{
			...;
			func=SymLoadModuleEx,mod=dbghelp.dll;
		}
	}
}
suppression = {
	name = "kernelbase.dll / GetModuleFileNameEx"
	type = {uninitialized_memory_access}
	stacks = {
		{
			...;
			mod=kernelbase.dll,func=WideCharToMultiByte;
			mod=kernelbase.dll,func=GetModuleBaseNameA;
		}
	}
}
suppression = {
	name = "kernelbase.dll / GetModuleFileNameEx"
	type = {uninitialized_memory_access}
	stacks = {
		{
			...;
			mod=kernelbase.dll,func=WideCharToMultiByte;
			mod=kernelbase.dll,func=GetModuleFileNameExA;
		}
	}
}
suppression = {
	name = "ntmarta.dll / SetNamedSecurityInfo"
	type = {uninitialized_memory_access}
	stacks = {
		{
			...;
			mod=ntdll.dll,func=RtlValidSid;
			mod=ntmarta.dll,func=SetNamedSecurityInfoW;
		}
	}
}









suppression = {
	name = "connect / s_CreateHttpConnector"
	type = {uninitialized_memory_access}
	stacks = {
		{
			...;
			func="s_CreateHttpConnector(const struct SConnNetInfo *, const char *, int, unsigned int, void *,  *, struct SHttpConnector * *)",src=ncbi_http_connector.c;
			func="s_CreateConnector(const struct SConnNetInfo *, const char *, unsigned int,  *, void *,  *,  *)",src=ncbi_http_connector.c;
		}
		allocation={
			...;
			func="s_CreateHttpConnector(const struct SConnNetInfo *, const char *, int, unsigned int, void *,  *, struct SHttpConnector * *)",src=ncbi_http_connector.c;
			func="s_CreateConnector(const struct SConnNetInfo *, const char *, unsigned int,  *, void *,  *,  *)",src=ncbi_http_connector.c;
		}
	}
}
suppression = {
	name = "connect / ConnNetInfo_CloneInternal - seems false positive"
	type = {uninitialized_memory_access}
	stacks = {
		{
			!!!;
			src=ncbi_connutil.c,func=ConnNetInfo_CloneInternal;
		}
	}
}

suppression = {
	name = "Compression API / CCompressionStreambuf / zlib / inflate"
	type = {uninitialized_memory_access}
	stacks = {
		{
			...;
			func=inflate,src=inflate.c;
			func="ncbi::CZipDecompressor::Process(char const *,unsigned __int64,char *,unsigned __int64,unsigned __int64 *,unsigned __int64 *)",src=zlib.cpp;
		}
		allocation={
			...;
			func="ncbi::CCompressionStreambuf::CCompressionStreambuf(class std::basic_ios<char,struct std::char_traits<char> > *,class ncbi::CCompressionStreamProcessor *,class ncbi::CCompressionStreamProcessor *)",src=streambuf.cpp;
			func=Create,src=stream.cpp;
		}
	}
}

suppression = {
	name = "boost / "boost::runtime::basic_param"
	type = {uninitialized_memory_access_partial}
	stacks = {
		{
			...;
			func="`anonymous namespace'::__std_mismatch_impl<`anonymous namespace'::_Find_traits_1,unsigned char>(const void *, const void *, const unsigned __int64)",src=vector_algorithms.cpp;
			func=_Mismatch_vectorized,src=xtree;
			func=_Emplace,src=parameter.hpp;
			func="boost::unit_test::runtime_config::`anonymous namespace'::register_parameters(class boost::runtime::parameters_store & const)",src=unit_test_parameters.ipp;
		}
		allocation={
			...;
			func=_Allocate,src=xstring;
			func="boost::runtime::basic_param::basic_param(class boost::runtime::basic_param const &)";
		}
	}
}
suppression = {
	name = "bm / sse2_gap_find"
	type = {uninitialized_memory_access_partial}
	stacks = {
		{
			!!!;
			src=bmsse2.h,func=sse2_gap_find;
		}
		allocation={
			!!!;
			src=bmblocks.h,func=allocate;
		}
	}
}
suppression = {
	name = "bzip2 / BZ2_bzCompress"
	type = {uninitialized_memory_access}
	stacks = {
		{
			...;
			func="fallbackSort(unsigned int *, unsigned int *, unsigned int *, int, int)",src=blocksort.c;
			func=BZ2_blockSort,src=blocksort.c;
			func=BZ2_compressBlock,src=compress.c;
			...;
			func=BZ2_bzCompress,src=bzlib.c;
		}
		allocation={
			func=BZ2_bzCompressInit,src=bzlib.c;
		}
	}
}
suppression = {
	name = "bzip2 / BZ2_decompress"
	type = {uninitialized_memory_access}
	stacks = {
		{
			...;
			func=BZ2_decompress,src=decompress.c;
			func=BZ2_bzDecompress,src=bzlib.c;
		}
	}
}
suppression = {
	name = "bzip2 / BZ2_bzReadOpen"
	type = {uninitialized_memory_access}
	stacks = {
		{
			...;
			func=BZ2_decompress,src=decompress.c;
			func=BZ2_bzDecompress,src=bzlib.c;
			func=BZ2_bzRead,src=bzlib.c;
		}
		allocation={
			func=BZ2_bzReadOpen,src=bzlib.c;
		}
	}
}
suppression = {
	name = "lzo / lzo1x_decompress_safe"
	type = {prob_mem_uninit,prob_mem_uninit_partial}
	stacks = {
		{
			!!!;
			func=lzo1x_decompress_safe,src=lzo1x_d.ch;
		}
	}
}
suppression = {
	name = "zlib / inflate"
	type = {uninitialized_memory_access}
	stacks = {
		{
			...;
			func=inflate,src=inflate.c;
		}
	}
}
suppression = {
	name = "zstd / ZSTD_decompressContinueStream"
	type = {invalid_memory_access_partial}
	stacks = {
		{
			...;
			func=ZSTD_decompressContinueStream,src=zstd_decompress.c;
		}
	}
}
suppression = {
	name = "zstd / ZSTD_checkOutBuffer"
	type = {uninitialized_memory_access}
	stacks = {
		{
			!!!;
			src=zstd_decompress.c,func=ZSTD_checkOutBuffer;
		}
	}
}
suppression = {
	name = "Compression API / CArchive / compare items - false positive"
	type = {uninitialized_memory_access}
	stacks = {
		{
			...;
			func=compare,src=archive.cpp;
			func="ncbi::CArchive::x_ReadAndProcess(enum ncbi::CArchive::EAction)",src=archive.cpp;
		}
		allocation={
			...;
			func="ncbi::CArchive::x_ReadAndProcess(enum ncbi::CArchive::EAction)",src=archive.cpp;
		}
	}
}
suppression = {
	name = "test_compress / test_compress_run - zip -- false positive"
	type = {uninitialized_memory_access}
	stacks = {
		{
			!!!;
			func="CTest::TestMethod<class ncbi::CZipCompression,class ncbi::CZipCompressionFile,class ncbi::CZipStreamCompressor,class ncbi::CZipStreamDecompressor>(enum ncbi::CCompressStream::EMethod,char const *,unsigned __int64,unsigned __int64)",mod=test_compress.exe,src=test_compress_run.inl;
		}
		allocation={
			!!!;
			func="CTest::TestMethod<class ncbi::CZipCompression,class ncbi::CZipCompressionFile,class ncbi::CZipStreamCompressor,class ncbi::CZipStreamDecompressor>(enum ncbi::CCompressStream::EMethod,char const *,unsigned __int64,unsigned __int64)",mod=test_compress.exe,src=test_compress_run.inl;
		}
	}
}
suppression = {
	name = "test_compress / test_compress_run - bzip2 -- false positive"
	type = {uninitialized_memory_access}
	stacks = {
		{
			!!!;
			func="CTest::TestMethod<class ncbi::CBZip2Compression,class ncbi::CBZip2CompressionFile,class ncbi::CBZip2StreamCompressor,class ncbi::CBZip2StreamDecompressor>(enum ncbi::CCompressStream::EMethod,char const *,unsigned __int64,unsigned __int64)",mod=test_compress.exe,src=test_compress_run.inl;
		}
		allocation={
			!!!;
			func="CTest::TestMethod<class ncbi::CBZip2Compression,class ncbi::CBZip2CompressionFile,class ncbi::CBZip2StreamCompressor,class ncbi::CBZip2StreamDecompressor>(enum ncbi::CCompressStream::EMethod,char const *,unsigned __int64,unsigned __int64)",mod=test_compress.exe,src=test_compress_run.inl;
		}
	}
}
suppression = {
	name = "test_compress / test_compress_run - lzo -- false positive"
	type = {uninitialized_memory_access}
	stacks = {
		{
			!!!;
			func="CTest::TestMethod<class ncbi::CLZOCompression,class ncbi::CLZOCompressionFile,class ncbi::CLZOStreamCompressor,class ncbi::CLZOStreamDecompressor>(enum ncbi::CCompressStream::EMethod,char const *,unsigned __int64,unsigned __int64)",mod=test_compress.exe,src=test_compress_run.inl;
		}
		allocation={
			!!!;
			func="CTest::TestMethod<class ncbi::CLZOCompression,class ncbi::CLZOCompressionFile,class ncbi::CLZOStreamCompressor,class ncbi::CLZOStreamDecompressor>(enum ncbi::CCompressStream::EMethod,char const *,unsigned __int64,unsigned __int64)",mod=test_compress.exe,src=test_compress_run.inl;
		}
	}
}
suppression = {
	name = "test_compress / test_compress_run - zstd -- false positive"
	type = {uninitialized_memory_access}
	stacks = {
		{
			!!!;
			src=test_compress_run.inl,func="CTest::TestMethod<class ncbi::CZstdCompression,class ncbi::CZstdCompressionFile,class ncbi::CZstdStreamCompressor,class ncbi::CZstdStreamDecompressor>(enum ncbi::CCompressStream::EMethod,char const *,unsigned __int64,unsigned __int64)";
		}
		allocation={
			!!!;
			src=test_compress_run.inl,func="CTest::TestMethod<class ncbi::CZstdCompression,class ncbi::CZstdCompressionFile,class ncbi::CZstdStreamCompressor,class ncbi::CZstdStreamDecompressor>(enum ncbi::CCompressStream::EMethod,char const *,unsigned __int64,unsigned __int64)";
		}
	}
}
suppression = {
	name = "crypt32.dll - CertEnumCertificatesInStore"
	type = {uninitialized_memory_access}
	stacks = {
		{
			...;
			mod=crypt32.dll,func=CertEnumCertificatesInStore;
			mod=crypt32.dll,func=I_CryptGetAsn1Encoder;
		}
	}
}
suppression = {
	name = "crypt32.dll - I_CryptGetAsn1Encoder"
	type = {uninitialized_memory_access}
	stacks = {
		{
			...;
			mod=crypt32.dll,func=I_CryptGetAsn1Encoder;
		}
	}
}
suppression = {
	name = "crypt32.dll - CertOpenStore"
	type = {uninitialized_memory_access}
	stacks = {
		{
			...;
			mod=crypt32.dll,func=CertOpenStore;
		}
		allocation={
			...;
			mod=crypt32.dll,func=CertOpenStore;
		}
	}
}
suppression = {
	name = "crypt32.dll - CertCloseStore"
	type = {uninitialized_memory_access}
	stacks = {
		{
			...;
			mod=crypt32.dll,func=CertCloseStore;
		}
		allocation={
			...;
			mod=crypt32.dll,func=CertCloseStore;
		}
	}
}
suppression = {
	name = "bdb / _db_close()"
	type = {uninitialized_memory_access_partial}
	stacks = {
		{
			!!!;
			src=db.c,func=_db_close;
		}
	}
}

suppression = {
	name = "dbapi / ctlib / ct_dyndesc"
	type = {uninitialized_memory_access}
	stacks = {
		{
			mod=libsybct64.dll,func=ct_dyndesc;
		}
	}
}
suppression = {
	name = "dbapi / ctlib / memcmp"
	type = {invalid_call}
	stacks = {
		{
			...;
			func=com_memmovefn_nt,mod=libsybcomn64.dll;
		}
	}
}
suppression = {
	name = "dbapi / ctlib / ct_wakeup"
	type = {uninitialized_memory_access}
	stacks = {
		{
			...;
			mod=libsybct64.dll,func=ct_wakeup;
		}
	}
}
suppression = {
	name = "dbapi / freetds100 / tds_get_byte_ver100"
	type = {uninitialized_memory_access}
	stacks = {
		{
			...;
			func=tds_get_byte_ver100,src=read.c;
			func=tds_process_tokens_ver100,src=token.c;
		}
	}
}

