suppression = {
	name = "ncbienv.cpp - CNcbiEnvironment::Reset() - access to _environ after putenv()"
	type = {invalid_memory_access}
	stacks = {
		{
			!!!;
			src=ncbienv.cpp,func=Reset;
		}
	}
}
suppression = {
	name = "ncbienv.cpp - CNcbiEnvironment::Set() - false positive"
	type = {invalid_memory_access_partial}
	stacks = {
		{
			!!!;
			func=Set,src=ncbienv.cpp;
		}
	}
}
suppression = {
	name = "ncbimtx.cpp - InitializeCriticalSection - InitializeHandle"
	type = {kernel_handle_leak}
	stacks = {
		allocation={
			!!!;
			func=InitializeHandle,src=ncbimtx.cpp;
		}
	}
}
suppression = {
	name = "ncbimtx.cpp - InitializeCriticalSection - InitializeDynamic"
	type = {kernel_handle_leak}
	stacks = {
		allocation={
			...;
			func=InitializeDynamic,src=ncbimtx.cpp;
		}
	}
}
suppression = {
	name = "ncbimtx.cpp - SSytemFastMutex - resource leak (1)"
	type = {kernel_handle_leak}
	stacks = {
		allocation={
			!!!;
			func=InitializeStatic,src=ncbimtx.cpp;
		}
	}
}
suppression = {
	name = "ncbimtx.cpp - SSytemFastMutex - resource leak (2)"
	type = {kernel_handle_leak}
	stacks = {
		allocation={
			!!!;
			func=InitializeStatic,src=ncbimtx.cpp;
		}
	}
}
suppression = {
	name = "ncbimtx.cpp - CInternalRWLock mutex creation"
	type = {kernel_handle_leak}
	stacks = {
		allocation={
			!!!;
			mod=test_ncbi_system.exe,func=CInternalRWLock,src=ncbimtx.cpp;
		}
	}
}
suppression = {
	name = "ncbimtx.cpp - CInternalRWLock - synchronization object handle problem"
	type = {kernel_handle_leak}
	stacks = {
		allocation={
			!!!;
			src=ncbimtx.cpp,func=CInternalRWLock;
		}
	}
}
suppression = {
	name = "ncbimtx.cpp - InitializeCriticalSection - memory leak"
	type = {reachable_memory_leak}
	stacks = {
		allocation={
			...;
			func=InitializeHandle,src=ncbimtx.cpp;
		}
	}
}
suppression = {
	name = "ncbi_safe_static.hpp - CSafeStaticRef::x_Init()"
	type = {unreachable_memory_leak}
	stacks = {
		allocation={
			...;
			func=x_Init,src=ncbi_safe_static.hpp;
		}
	}
}
suppression = {
	name = "ncbidiag.cpp - SetDiagStream()"
	type = {reachable_memory_leak}
	stacks = {
		allocation={
			...;
			func=SetDiagStream,src=ncbidiag.cpp;
		}
	}
}
suppression = {
	name = "ncbiobj"
	type = {unreachable_memory_leak}
	stacks = {
		allocation={
			...;
			func="operator new",src=ncbiobj.cpp;
		}
	}
}
suppression = {
	name = "ncbi_safe_static.hpp - CSafeStatic::x_Init() - memory leak"
	type = {reachable_memory_leak}
	stacks = {
		allocation={
			...;
			func=x_Init,src=ncbi_safe_static.hpp;
		}
	}
}
suppression = {
	name = "False positive in basic_string::assign() called from CNcbiEnvironment constructor"
	type = {invalid_memory_access}
	stacks = {
		{
			...;
			func=assign,src=xstring;
			func=Reset,src=ncbienv.cpp;
			func=CNcbiEnvironment,src=ncbienv.cpp;
		}
	}
}
suppression = {
	name = "False positive in basic_string::assign() called from CNcbiEnvironment constructor"
	type = {invalid_memory_access_partial}
	stacks = {
		{
			...;
			func=assign,src=xstring;
			func=Reset,src=ncbienv.cpp;
			func=CNcbiEnvironment,src=ncbienv.cpp;
		}
	}
}
suppression = {
	name = "CStackTrace::Expand / SymGetSymFromAddr / dbhelp"
	type = {invalid_memory_access_partial}
	stacks = {
		{
			...;
			mod=dbghelp.dll,func=SymGetSymFromAddr;
			func=Expand,src=ncbi_stack_win64.cpp,func_line=31;
		}
		allocation={
			...;
			mod=dbghelp.dll,func=SymGetSymFromAddr;
			func=Expand,src=ncbi_stack_win64.cpp,func_line=31;
		}
	}
}
suppression = {
	name = "CExec::System / system() - out of our control"
	type = {invalid_memory_access_partial}
	stacks = {
		{
			!!!;
			src=ncbiexec.cpp,func=System;
		}
		allocation={
			!!!;
			src=ncbiexec.cpp,func=System;
		}
	}
}
suppression = {
	name = "CDirEntry::GetMode / stat() - out of our control"
	type = {invalid_memory_access_partial}
	stacks = {
		{
			!!!;
			src=ncbifile.cpp,func=GetMode;
		}
		allocation={
			!!!;
			src=ncbifile.cpp,func=GetMode;
		}
	}
}
suppression = {
	name = "CFile::Compare() / false positione on memcmp()"
	type = {uninitialized_memory_access}
	stacks = {
		{
			!!!;
			src=ncbifile.cpp,func="ncbi::CFile::Compare(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned __int64)";
		}
	}
}

